// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
        Not(in=zx,out=notzx);
        And16(a[0..15]=x[0..15],b[0]=notzx,b[1]=notzx,b[2]=notzx,b[3]=notzx,b[4]=notzx,b[5]=notzx,b[6]=notzx,b[7]=notzx,b[8]=notzx,b[9]=notzx,b[10]=notzx,b[11]=notzx,b[12]=notzx,b[13]=notzx,b[14]=notzx,b[15]=notzx,out[0..15]= x1);
        Not(in=zy,out=notzy);
        And16(a[0..15]=y[0..15],b[0]=notzy,b[1]=notzy,b[2]=notzy,b[3]=notzy,b[4]=notzy,b[5]=notzy,b[6]=notzy,b[7]=notzy,b[8]=notzy,b[9]=notzy,b[10]=notzy,b[11]=notzy,b[12]=notzy,b[13]=notzy,b[14]=notzy,b[15]=notzy,out[0..15]= y1);

        
        //nx.nyの条件分岐
        Not16(in[0..15]=x1,out[0..15]=notx1);
        Not16(in[0]=nx,in[1]=nx,in[2]=nx,in[3]=nx,in[4]=nx,in[5]=nx,in[6]=nx,in[7]=nx,in[8]=nx,in[9]=nx,in[10]=nx,in[11]=nx,in[12]=nx,in[13]=nx,in[14]=nx,in[15]=nx,out[0..15]=notnx);
        And16(a[0..15]=notx1,b[0]=nx,b[1]=nx,b[2]=nx,b[3]=nx,b[4]=nx,b[5]=nx,b[6]=nx,b[7]=nx,b[8]=nx,b[9]=nx,b[10]=nx,b[11]=nx,b[12]=nx,b[13]=nx,b[14]=nx,b[15]=nx,out[0..15]=cx1);
        And16(a[0..15]=notnx,b[0..15]=x1,out[0..15]=cx2);
        Or16(a[0..15]=cx1, b[0..15]=cx2, out[0..15]=x2);

        Not16(in[0..15]=y1,out[0..15]=noty1);
        Not16(in[0]=ny,in[1]=ny,in[2]=ny,in[3]=ny,in[4]=ny,in[5]=ny,in[6]=ny,in[7]=ny,in[8]=ny,in[9]=ny,in[10]=ny,in[11]=ny,in[12]=ny,in[13]=ny,in[14]=ny,in[15]=ny,out[0..15]=notny);
        And16(a[0..15]=noty1,b[0]=ny,b[1]=ny,b[2]=ny,b[3]=ny,b[4]=ny,b[5]=ny,b[6]=ny,b[7]=ny,b[8]=ny,b[9]=ny,b[10]=ny,b[11]=ny,b[12]=ny,b[13]=ny,b[14]=ny,b[15]=ny,out[0..15]=cy1);
        And16(a[0..15]=notny,b[0..15]=y1,out[0..15]=cy2);
        Or16(a[0..15]=cy1, b[0..15]=cy2, out[0..15]=y2);

        //fによる値の操作
        Add16(a[0..15]=x2,b[0..15]=y2,out[0..15]=addNum);
        And16(a[0..15]=x2,b[0..15]=y2,out[0..15]=andNum);
        Mux16(a[0..15]=andNum, b[0..15]=addNum, sel=f, out[0..15]=fnum);

        //noによる操作
        Not16(in[0..15]=fnum,out[0..15]=notfnum);
        Not16(in[0]=no,in[1]=no,in[2]=no,in[3]=no,in[4]=no,in[5]=no,in[6]=no,in[7]=no,in[8]=no,in[9]=no,in[10]=no,in[11]=no,in[12]=no,in[13]=no,in[14]=no,in[15]=no,out[0..15]=notno);
        And16(a[0..15]=notfnum,b[0]=no,b[1]=no,b[2]=no,b[3]=no,b[4]=no,b[5]=no,b[6]=no,b[7]=no,b[8]=no,b[9]=no,b[10]=no,b[11]=no,b[12]=no,b[13]=no,b[14]=no,b[15]=no,out[0..15]=cno1);
        And16(a[0..15]=notno,b[0..15]=fnum,out[0..15]=cno2);
        Or16(a[0..15]=cno1, b[0..15]=cno2, out[0..15]=out);
        Or16(a[0..15]=cno1, b[0..15]=cno2, out[0]=out0,out[1]=out1,out[2]=out2,out[3]=out3,out[4]=out4,out[5]=out5,out[6]=out6,out[7]=out7,out[8]=out8,out[9]=out9,out[10]=out10,out[11]=out11,out[12]=out12,out[13]=out13,out[14]=out14,out[15]=out15);

        Or8Way(in[0]=out0,in[1]=out1,in[2]=out2,in[3]=out3,in[4]=out4,in[5]=out5,in[6]=out6,in[7]=out7 ,out=oreight1);
        Or8Way(in[0]=out8,in[1]=out9,in[2]=out10,in[3]=out11,in[4]=out12,in[5]=out13,in[6]=out14,in[7]=out15 ,out=oreight2);
        Or(a=oreight1, b=oreight2, out=zr1);
        Not(in=zr1,out=zr);
        And(a=out15,b=true,out=ng);

}